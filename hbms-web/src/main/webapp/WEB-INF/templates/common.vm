<div class="modal fade" id="baseDataSelectDialog" tabindex="-1" role="dialog" aria-labelledby="baseDataSelectDialogTitle"
     aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">
          <span aria-hidden="true">&times;</span><span class="sr-only">关闭</span>
        </button>
        <h4 class="modal-title" id="baseDataSelectDialogTitle">选择</h4>
      </div>
      <div class="modal-body">
        <input type="hidden" name="callback">
        <input type="hidden" name="baseDataSo">
        <div id="baseDataTreeContainer"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">关闭</button>
        <button id="selectBaseData" type="button" class="btn btn-primary">选择</button>
      </div>
    </div>
  </div>
</div>
<script type="text/javascript">

  function openBaseDataSelectDialog(code, isMultiSelect, callback) {
    $('#baseDataEditDialog input').val(null);
    $('#baseDataEditDialog input[name=callback]').val(callback);
    findBaseDataByCode(code, function (data) {
      var treeNodeData = convertServerDataToTreeNodeData(data);
      $("#baseDataSelectDialogTitle").text("选择  " + treeNodeData[0]['name']);
      $('#baseDataTreeContainer').empty();
      $('#baseDataTreeContainer').html("<ul id='baseDataTree' class='ztree'></ul>");
      var setting = {
          check: {
              enable: true,
              chkStyle: isMultiSelect ? "checkbox" : "radio",
              chkboxType: { "Y": "", "N": "" }
          }
      };
      var zTreeObj = $.fn.zTree.init($("#baseDataTree"), setting, treeNodeData);
      $("#selectBaseData").unbind();
      $("#selectBaseData").on("click", function (obj) {
        var treeObj = $.fn.zTree.getZTreeObj("baseDataTree");
        var selectedNodes = treeObj.getCheckedNodes(true);
        var pathedNames = [];
        for (var i = 0 ; i < selectedNodes.length; i++){
          pathedNames[i] = "/" + getPathedNodeName(selectedNodes[i]);
        }
        for (var i = 0 ; i < selectedNodes.length; i++){
          selectedNodes[i].name = pathedNames[i];
        }
        callback(selectedNodes);
        $('#baseDataSelectDialog').modal('hide');
      });
      $('#baseDataSelectDialog').modal('show');
    });
  }
  
  function getPathedNodeName(node) {
    var name = node.name;
    if (node.getParentNode() && node.getParentNode() != null) {
      name = getPathedNodeName(node.getParentNode()) + "/" + name;
    }
    return name;
  }

  function findBaseDataByCode(code, successFunction) {
    $.ajax({
      type: "POST",
      url: "/baseData/findByCode.do",
      data: {code:code},
      dataType: "json",
      timeout: 3000,
      success: function(data, textStatus, jqXHR){
        if (successFunction) {
          successFunction(data);
        }
      },
      error: function(XMLHttpRequest, textStatus, errorThrown) {
        var tipHtml = "<h5 class='red'><i class=\"icon-warning-sign red bigger-130\"></i>加载失败</h5>";
        bootbox.dialog({
          message: tipHtml,
          buttons: {
            "danger" : {
              "label" : "关闭",
              "className" : "btn-sm btn-danger"
            }
          }
        });
      }
    });
  }

  function convertServerDataToTreeNodeData(serverData) {
    var treeNodeData = [];
    $(serverData).each(function (index, itemData) {
      var node = {name : itemData.label, id:itemData.id};
      treeNodeData.push(node);
      if (itemData.children && itemData.children.length > 0) {
        var children = convertServerDataToTreeNodeData(itemData.children);
        node.children = children;
      }
    });
    return treeNodeData;
  }

</script> 