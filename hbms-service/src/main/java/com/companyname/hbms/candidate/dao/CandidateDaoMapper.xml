<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.companyname.hbms.candidate.dao.CandidateDao">

  <insert id="insert" parameterMap="domain.Candidate">
    insert into Candidate(
      name,
      sex,
      birthday,
      workingYears,
      papersTypeId,
      papersNumber,
      residence,
      abroadStudyOrWork,
      email,
      currentAnnualSalary,
      mobilePhone,
      homePhone,
      companyPhone,
      jobHuntingStatusId,
      householdRegister,
      keyword,
      countryId,
      high,
      maritalStatusId,
      politicalStatusId,
      postcode,
      qq,
      address,
      selfHomepage,
      yn,
      createTime,
      createUser,
      updateTime,
      updateUser
    ) values (
      #{name},
      #{sex},
      #{birthday},
      #{workingYears},
      #{papersTypeId},
      #{papersNumber},
      #{residence},
      #{abroadStudyOrWork},
      #{email},
      #{currentAnnualSalary},
      #{mobilePhone},
      #{homePhone},
      #{companyPhone},
      #{jobHuntingStatusId},
      #{householdRegister},
      #{keyword},
      #{countryId},
      #{high},
      #{maritalStatusId},
      #{politicalStatusId},
      #{postcode},
      #{qq},
      #{address},
      #{selfHomepage},
      1,
      now(),
      #{createUser},
      now(),
      #{updateUser}
    )
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select last_insert_id();
    </selectKey>
  </insert>

  <update id="update" parameterMap="domain.Candidate">
    update Candidate set
      name = #{name},
      sex = #{sex},
      birthday = #{birthday},
      workingYears = #{workingYears},
      papersTypeId = #{papersTypeId},
      papersNumber = #{papersNumber},
      residence = #{residence},
      abroadStudyOrWork = #{abroadStudyOrWork},
      email = #{email},
      currentAnnualSalary = #{currentAnnualSalary},
      mobilePhone = #{mobilePhone},
      homePhone = #{homePhone},
      companyPhone = #{companyPhone},
      jobHuntingStatusId = #{jobHuntingStatusId},
      householdRegister = #{householdRegister},
      keyword = #{keyword},
      countryId = #{countryId},
      high = #{high},
      maritalStatusId = #{maritalStatusId},
      politicalStatusId = #{politicalStatusId},
      postcode = #{postcode},
      qq = #{qq},
      address = #{address},
      selfHomepage = #{selfHomepage},
      createTime = now(),
      createUser =  #{createUser},
      updateTime = now(),
      updateUser = #{updateUser}
    where
      id = #{id}
  </update>

  <delete id="disable" parameterType="java.lang.Long">
    update Candidate set yn = 0 where id = #{id}
  </delete>

  <delete id="enable" parameterType="java.lang.Long">
    update Candidate set yn = 1 where id = #{id}
  </delete>
  
  <select id="findByBean"
          parameterMap="domain.Candidate"
          resultMap="domain.Candidate">
    select
      t.*,
      reportR.candidateId as RES_ORI_candidateId,
      reportR.name as RES_ORI_name,
      reportR.keyword as RES_ORI_keyword,
      reportR.path as RES_ORI_path,
      reportR.languageId as RES_ORI_languageId,
      reportR.type as RES_ORI_type,
      reportR.yn as RES_ORI_yn,
      originalR.candidateId as RES_REP_candidateId,
      originalR.name as RES_REP_name,
      originalR.keyword as RES_REP_keyword,
      originalR.path as RES_REP_path,
      originalR.languageId as RES_REP_languageId,
      originalR.type as RES_REP_type,
      originalR.yn as RES_REP_yn
    from
      (select
        t.*,
        lt1.id as PAP_id,
        lt1.value as PAP_value,
        lt2.id as JOB_id,
        lt2.value as JOB_value,
        lt3.id as COU_id,
        lt3.value as COU_value,
        lt4.id as POL_id,
        lt4.value as POL_value,
        lt5.id as MAR_id,
        lt5.value as MAR_value
        from Candidate t
        left join ListItem lt1 on t.papersTypeId = lt1.id
        left join ListItem lt2 on t.jobHuntingStatusId = lt2.id
        left join ListItem lt3 on t.countryId = lt3.id
        left join ListItem lt4 on t.politicalStatusId = lt4.id
        left join ListItem lt5 on t.maritalStatusId = lt5.id
        where 1=1
        <if test="id != null">
          and t.id = #{id}
        </if>
        <if test="name != null">
          and t.name = #{name}
        </if>
        <if test="keyword != null">
          and t.keyword = #{keyword}
        </if>
        <if test="yn != null">
          and t.yn = #{yn}
        </if>
        <if test="createUser != null">
          and t.createUser = #{createUser}
        </if>
        <if test="updateUser != null">
          and t.updateUser = #{updateUser}
        </if>
      ) t
      left join (
        select * from Resume where id in (
          select max(id) from Resume where 1=1
          <if test="lastOriginalResume != null">
            <if test="lastOriginalResume.id != null">
              and id = #{lastOriginalResume.id}
            </if>
            <if test="lastOriginalResume.candidateId != null">
              and candidateId = #{lastOriginalResume.candidateId}
            </if>
            <if test="lastOriginalResume.name != null">
              and name = #{lastOriginalResume.name}
            </if>
            <if test="lastOriginalResume.keyword != null">
              and keyword = #{lastOriginalResume.keyword}
            </if>
            <if test="lastOriginalResume.languageId != null">
              and languageId = #{lastOriginalResume.languageId}
            </if>
            <if test="lastOriginalResume.yn != null">
              and yn = #{lastOriginalResume.yn}
            </if>
          </if>
          group by candidateId
        )
      ) originalR on t.id=originalR.candidateId
      left join (
        select * from Resume where id in (
          select max(id) from Resume where 1=1
          <if test="lastReportResume != null">
            <if test="lastReportResume.id != null">
              and id = #{lastReportResume.id}
            </if>
            <if test="lastReportResume.candidateId != null">
              and candidateId = #{lastReportResume.candidateId}
            </if>
            <if test="lastReportResume.name != null">
              and name = #{lastReportResume.name}
            </if>
            <if test="lastReportResume.keyword != null">
              and keyword = #{lastReportResume.keyword}
            </if>
            <if test="lastReportResume.languageId != null">
              and languageId = #{lastReportResume.languageId}
            </if>
            <if test="lastReportResume.yn != null">
              and yn = #{lastReportResume.yn}
            </if>
          </if>
          group by candidateId
        )
    ) reportR on t.id=reportR.candidateId
  </select>

</mapper>