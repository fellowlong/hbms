<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.companyname.hbms.candidate.dao.CandidateDao">

  <insert id="insert" parameterMap="domain.Candidate">
    insert into Candidate(
      name,
      sex,
      birthday,
      workingYears,
      papersTypeId,
      papersNumber,
      residence,
      abroadStudyOrWork,
      email,
      currentAnnualSalary,
      mobilePhone,
      homePhone,
      companyPhone,
      jobHuntingStatusId,
      householdRegister,
      keyword,
      countryId,
      high,
      maritalStatusId,
      politicalStatusId,
      postcode,
      snsNo,
      address,
      selfHomepage,
      yn,
      createTime,
      createUser,
      updateTime,
      updateUser
    ) values (
      #{name},
      #{sex},
      #{birthday},
      #{workingYears},
      #{papersTypeId},
      #{papersNumber},
      #{residence},
      #{abroadStudyOrWork},
      #{email},
      #{currentAnnualSalary},
      #{mobilePhone},
      #{homePhone},
      #{companyPhone},
      #{jobHuntingStatusId},
      #{householdRegister},
      #{keyword},
      #{countryId},
      #{high},
      #{maritalStatusId},
      #{politicalStatusId},
      #{postcode},
      #{snsNo},
      #{address},
      #{selfHomepage},
      1,
      now(),
      #{createUser},
      now(),
      #{updateUser}
    )
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      select last_insert_id();
    </selectKey>
  </insert>

  <update id="update" parameterMap="domain.Candidate">
    update Candidate set
      name = #{name},
      sex = #{sex},
      birthday = #{birthday},
      workingYears = #{workingYears},
      papersTypeId = #{papersTypeId},
      papersNumber = #{papersNumber},
      residence = #{residence},
      abroadStudyOrWork = #{abroadStudyOrWork},
      email = #{email},
      currentAnnualSalary = #{currentAnnualSalary},
      mobilePhone = #{mobilePhone},
      homePhone = #{homePhone},
      companyPhone = #{companyPhone},
      jobHuntingStatusId = #{jobHuntingStatusId},
      householdRegister = #{householdRegister},
      keyword = #{keyword},
      countryId = #{countryId},
      high = #{high},
      maritalStatusId = #{maritalStatusId},
      politicalStatusId = #{politicalStatusId},
      postcode = #{postcode},
      snsNo = #{snsNo},
      address = #{address},
      selfHomepage = #{selfHomepage},
      createTime = now(),
      createUser =  #{createUser},
      updateTime = now(),
      updateUser = #{updateUser}
    where
      id = #{id}
  </update>

  <delete id="disable" parameterType="java.lang.Long">
    update Candidate set yn = 0 where id = #{id}
  </delete>

  <delete id="enable" parameterType="java.lang.Long">
    update Candidate set yn = 1 where id = #{id}
  </delete>
  
  <select id="findByBean" parameterMap="domain.Candidate" resultMap="domain.Candidate">
    select
      t.*
    from
      (select
        t.*,
        lt1.id as JOB_id,
        lt1.value as JOB_value,
        lt2.id as COU_id,
        lt2.value as COU_value,
        lt3.id as MAR_id,
        lt3.value as MAR_value
        from Candidate t
        left join ListItem lt1 on t.jobHuntingStatusId = lt1.id
        left join ListItem lt2 on t.countryId = lt2.id
        left join ListItem lt3 on t.maritalStatusId = lt3.id
        where 1=1
        <if test="id != null">
          and t.id = #{id}
        </if>
        <if test="name != null">
          and t.name = #{name}
        </if>
        <if test="keyword != null">
          and t.keyword = #{keyword}
        </if>
        <if test="yn != null">
          and t.yn = #{yn}
        </if>
        <if test="createUser != null">
          and t.createUser = #{createUser}
        </if>
        <if test="updateUser != null">
          and t.updateUser = #{updateUser}
        </if>
      ) t
  </select>

</mapper>